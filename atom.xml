<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clark&#39;s Mill</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chihungtzeng.github.io/"/>
  <updated>2019-11-20T12:17:30.983Z</updated>
  <id>https://chihungtzeng.github.io/</id>
  
  <author>
    <name>Clark</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Integrate gitlab and buildbot</title>
    <link href="https://chihungtzeng.github.io/2019/11/20/Integrate-gitlab-and-buildbot/"/>
    <id>https://chihungtzeng.github.io/2019/11/20/Integrate-gitlab-and-buildbot/</id>
    <published>2019-11-19T23:35:03.000Z</published>
    <updated>2019-11-20T12:17:30.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Situation"><a href="#Situation" class="headerlink" title="Situation"></a>Situation</h3><p>This is my personal experience.  I joined a software team where teammates did not pay enough attention to keep our codebase healthy. In many times, I pulled the tip code and the build failed because of syntax error. Even worse, sometimes the program did not run as expected. When preparing for a demo, people took hours to figure out how to successfully compile the code and run the programs.</p><p>Many of the team members join the team right after gradation from college. No body in the school taught them how to cowork as a team using modern tools. However, with a constant failure in building/deploying our project, smart people can sense something wrong in the team, feel disapointed, and leave for more promising teams.</p><p>To remedy this, we first set up gitlab to host our repositories and discourage people to exchange code via USB disk. It didn’t work well; some people are relunctant to push their code to gitlab and insisted their old workflow. Later, I set up buildbot to monitor the codebase and its build status. It helped; some people reacted quickly once the buildbot sent them emails about build failures, but some just ignored the emails. Then I realized that a patch should be <em>automaticaly</em> inspected before landing to the master branch.  To make the codebase health, that is, compilable and runnable, it is not enough to rely on work ethics.  A systematic method must be developed to block problematic commits sneaking into the codebase.</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Combine the power of gitlab and buildbot to</p><ul><li>force code review, and</li><li>force compilation check before pushing to the master branch.</li></ul><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><ul><li>In gitlab, set master branch to be protected, allow no one to push, and allow only maintainers to merge.</li><li>In gitlab, set hook for merge request events.</li><li>In buildbot, define build steps for each merge request.</li><li>In buildbot, configure it to receive gitlab events, run the build steps, and send the build result back to gitlab.</li><li>(Optional) In gitlab, set merge checks to “Pipelines must succeed”.</li></ul><p>buildbot provides a good example of the configuration, see <a href="https://github.com/buildbot/buildbot/blob/master/master/docs/examples/gitlab.cfg" target="_blank" rel="noopener">here</a>.</p><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>We adopt many open source tools to perform the checks.  After a few weeks of the implementation, the buildbot dashboard looks greener than before.  Most of the workflow is done automatically. It does not take additional efforts when compared to the old one.  More important, people accept the new workflow, probably because the merge request are judged by objective tools, not by subjective people.</p><p>Below are the screenshots of the result. </p><p><img src="bbot_process_pipeline.png" alt="bbot_process_pipeline.png"></p><p><img src="mr_merge_only_success.png" alt="mr_merge_only_success.png"></p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>When buildbot and gitlab do not integrate well, add <strong>debug=True</strong> in GitLabStatusPush() call in buildbot master.cfg. It will show what’s going on between the two systems.</li><li>In the merge request pipeline, I wrote a condition to decide if we are going to do a clean build or a dirty build. This way, we can make the pipeline run faster in most cases.</li><li>In each pipeline, log everything and reveal it to users so that people know how to respond if something goes wrong.</li><li>At the beginning of merge request pipeline, I check if the commit is based on the latest master by using the command<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge-base --is-ancestor remotes/origin/master HEAD</span><br></pre></td></tr></table></figure>If yes, then the command returns 0. Otherwise 1.</li><li>I use the following command to list the files in a merge request<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --name-only `git merge-base origin/master HEAD`</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;Situation&quot;&gt;&lt;a href=&quot;#Situation&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="tooling" scheme="https://chihungtzeng.github.io/categories/tooling/"/>
    
    
      <category term="buildbot" scheme="https://chihungtzeng.github.io/tags/buildbot/"/>
    
      <category term="gitlab" scheme="https://chihungtzeng.github.io/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>binary hacks</title>
    <link href="https://chihungtzeng.github.io/2019/11/05/binary-hacks/"/>
    <id>https://chihungtzeng.github.io/2019/11/05/binary-hacks/</id>
    <published>2019-11-05T11:05:00.000Z</published>
    <updated>2019-11-13T12:25:27.064Z</updated>
    
    <content type="html"><![CDATA[<p>This is a memo of how I work with binary files in Linux system. For a more systematic study of this topic, I found the following two books quite useful. Their authors are Japenese, and I am not sure if there are Enghlish version.</p><p><img src="binary_hacks.jpg" alt="binary_hacks.jpg"></p><h3 id="Show-defined-symbols-in-a-shared-library"><a href="#Show-defined-symbols-in-a-shared-library" class="headerlink" title="Show defined symbols in a shared library"></a>Show defined symbols in a shared library</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nm -C -D --defined-only /usr/lib/libopencv_imgproc.so</span><br><span class="line">000000000048b738 B __bss_start</span><br><span class="line">0000000000163880 T cv2DRotationMatrix</span><br><span class="line">0000000000048360 T cvAcc</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Show-debug-info-section-contents"><a href="#Show-debug-info-section-contents" class="headerlink" title="Show .debug_info section contents"></a>Show .debug_info section contents</h3><p>See symbol values</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ readelf --debug-dump=info foo.o</span><br><span class="line">Contents of the .debug_info section:</span><br><span class="line"></span><br><span class="line">  Compilation Unit @ offset 0x0:</span><br><span class="line">   Length:        0xcb (32-bit)</span><br><span class="line">   Version:       4</span><br><span class="line">   Abbrev Offset: 0x0</span><br><span class="line">   Pointer Size:  8</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Show-source-code-paths"><a href="#Show-source-code-paths" class="headerlink" title="Show source code paths"></a>Show source code paths</h3><p>Sometimes we get a spurious shared library, and we want to find how it was compiled. We can use <code>strings</code> to do so.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ strings -f /usr/lib/libopencv_imgproc.so</span><br></pre></td></tr></table></figure><p>It actually prints all the strings in a binary file. We need to inspect the ouput to catch the path.</p><h3 id="Dump-the-contents-of-a-section"><a href="#Dump-the-contents-of-a-section" class="headerlink" title="Dump the contents of a section"></a>Dump the contents of a section</h3><p>For example, we want to dump the .text section of libopencv_imgproc.so</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -h /usr/lib64/libopencv_imgproc.so | grep .text</span><br><span class="line"> 10 .text         001e0a84  000000000003aa80  000000000003aa80  0003aa80  2**4</span><br><span class="line">$ dd if=/usr/lib64/libopencv_imgproc.so of=output.bin bs=1 count=$[0x001e0a84] skip=$[0x0003aa80]</span><br></pre></td></tr></table></figure><p>The output file is output.bin.</p><h3 id="Check-ABI-compatibility"><a href="#Check-ABI-compatibility" class="headerlink" title="Check ABI compatibility"></a>Check ABI compatibility</h3><p>abi-comliance-checker</p><h3 id="Check-module-dependency"><a href="#Check-module-dependency" class="headerlink" title="Check module dependency"></a>Check module dependency</h3><p>elf-dependency-walker</p><h3 id="Recompile-related-c-when-h-is-modified"><a href="#Recompile-related-c-when-h-is-modified" class="headerlink" title="Recompile related *.c when .h is modified"></a>Recompile related *.c when .h is modified</h3><p>autodependencies with GNU make</p><h3 id="Check-what-compiler-that-generates-a-binary-file"><a href="#Check-what-compiler-that-generates-a-binary-file" class="headerlink" title="Check what compiler that generates a binary file"></a>Check what compiler that generates a binary file</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -p .comment foo.so</span><br><span class="line"></span><br><span class="line">String dump of section &apos;.comment&apos;:</span><br><span class="line">  [     0]  GCC: (Gentoo 8.2.0-r6 p1.7) 8.2.0</span><br><span class="line">  [    22]  GCC: (Gentoo 8.3.0-r1 p1.1) 8.3.0</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -s --section .comment foo.o</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;This is a memo of how I work with binary files in Linux system. For a more systematic study of
        
      
    
    </summary>
    
    
      <category term="tooling" scheme="https://chihungtzeng.github.io/categories/tooling/"/>
    
    
  </entry>
  
  <entry>
    <title>clang tips and tricks</title>
    <link href="https://chihungtzeng.github.io/2019/11/04/clang-tips-and-tricks/"/>
    <id>https://chihungtzeng.github.io/2019/11/04/clang-tips-and-tricks/</id>
    <published>2019-11-04T10:53:47.000Z</published>
    <updated>2019-11-04T12:13:20.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sanitizers"><a href="#sanitizers" class="headerlink" title="sanitizers"></a>sanitizers</h3><p>clang and gcc have similar sanitizer flags. It is widely documented so I do not write it here :D</p><h3 id="static-analyzer"><a href="#static-analyzer" class="headerlink" title="static analyzer"></a>static analyzer</h3><p>Clang has built-in static analyzer. Other similar tools are <code>flawfinder</code>, <code>cppcheck</code>, <code>egypt</code>, <code>pscan</code>, and <code>splint</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ cat foo.c </span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int *a = (int *) malloc(sizeof(int));</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ clang --analyze foo.c</span><br><span class="line">foo.c:5:8: warning: Value stored to &apos;a&apos; during its initialization is never read</span><br><span class="line">  int *a = (int *) malloc(sizeof(int));</span><br><span class="line">       ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">foo.c:6:3: warning: Potential leak of memory pointed to by &apos;a&apos;</span><br><span class="line">  return 0;</span><br><span class="line">  ^~~~~~~~</span><br><span class="line">2 warnings generated.</span><br></pre></td></tr></table></figure><h3 id="Show-what-targets-are-supported"><a href="#Show-what-targets-are-supported" class="headerlink" title="Show what targets are supported"></a>Show what targets are supported</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ llc --version</span><br><span class="line">LLVM (http://llvm.org/):</span><br><span class="line">  LLVM version 8.0.1</span><br><span class="line">  Optimized build.</span><br><span class="line">  Default target: x86_64-pc-linux-gnu</span><br><span class="line">  Host CPU: skylake</span><br><span class="line"></span><br><span class="line">  Registered Targets:</span><br><span class="line">    amdgcn  - AMD GCN GPUs</span><br><span class="line">    bpf     - BPF (host endian)</span><br><span class="line">    bpfeb   - BPF (big endian)</span><br><span class="line">    bpfel   - BPF (little endian)</span><br><span class="line">    nvptx   - NVIDIA PTX 32-bit</span><br><span class="line">    nvptx64 - NVIDIA PTX 64-bit</span><br><span class="line">    r600    - AMD GPUs HD2XXX-HD6XXX</span><br><span class="line">    x86     - 32-bit X86: Pentium-Pro and above</span><br><span class="line">    x86-64  - 64-bit X86: EM64T and AMD64</span><br></pre></td></tr></table></figure><h3 id="Show-the-details-about-optimizer"><a href="#Show-the-details-about-optimizer" class="headerlink" title="Show the details about optimizer"></a>Show the details about optimizer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ llvm-as &lt; /dev/null | opt -O2 -disable-output -debug-pass=Arguments</span><br><span class="line">Pass Arguments:  -tti -targetlibinfo -tbaa -scoped-noalias -assumption-cache-tracker -verify -simplifycfg -domtree -sroa -early-cse -lower-expect</span><br><span class="line">Pass Arguments:  -targetlibinfo -tti -tbaa -scoped-noalias -assumption-cache-tracker -forceattrs -inferattrs -ipsccp -globalopt -domtree -mem2reg -deadargelim -basicaa -aa -domtree -instcombine -simplifycfg -basiccg -globals-aa -prune-eh -inline -functionattrs -domtree -sroa -early-cse -lazy-value-info -jump-threading -correlated-propagation -simplifycfg -basicaa -aa -domtree -instcombine -tailcallelim -simplifycfg -reassociate -domtree -loops -loop-simplify -lcssa -loop-rotate -basicaa -aa -licm -loop-unswitch -simplifycfg -basicaa -aa -domtree -instcombine -loops -scalar-evolution -loop-simplify -lcssa -indvars -aa -loop-idiom -loop-deletion -loop-unroll -basicaa -aa -mldst-motion -aa -memdep -gvn -basicaa -aa -memdep -memcpyopt -sccp -domtree -demanded-bits -bdce -basicaa -aa -instcombine -lazy-value-info -jump-threading -correlated-propagation -domtree -basicaa -aa -memdep -dse -loops -loop-simplify -lcssa -aa -licm -adce -simplifycfg -basicaa -aa -domtree -instcombine -barrier -basiccg -rpo-functionattrs -elim-avail-extern -basiccg -globals-aa -float2int -domtree -loops -loop-simplify -lcssa -loop-rotate -branch-prob -block-freq -scalar-evolution -basicaa -aa -loop-accesses -demanded-bits -loop-vectorize -instcombine -scalar-evolution -aa -slp-vectorizer -simplifycfg -basicaa -aa -domtree -instcombine -loops -loop-simplify -lcssa -scalar-evolution -loop-unroll -basicaa -aa -instcombine -loop-simplify -lcssa -aa -licm -scalar-evolution -alignment-from-assumptions -strip-dead-prototypes -globaldce -constmerge -verify</span><br><span class="line">Pass Arguments:  -domtree</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;sanitizers&quot;&gt;&lt;a href=&quot;#sanitizers&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="tooling" scheme="https://chihungtzeng.github.io/categories/tooling/"/>
    
    
      <category term="clang" scheme="https://chihungtzeng.github.io/tags/clang/"/>
    
  </entry>
  
  <entry>
    <title>gcc tips and tricks</title>
    <link href="https://chihungtzeng.github.io/2019/11/03/gcc-tips-and-tricks/"/>
    <id>https://chihungtzeng.github.io/2019/11/03/gcc-tips-and-tricks/</id>
    <published>2019-11-03T03:17:32.000Z</published>
    <updated>2019-11-06T11:39:05.577Z</updated>
    
    <content type="html"><![CDATA[<p>Here are the tips and tricks that I collected along the way during my years as a software engineer. Many tricks work in g++, too.  Some of them might be out of date now.  I keep them short in order to give an overview about the toolchain so that people can use google their howto/tutorials.</p><h3 id="Show-default-compiler-options"><a href="#Show-default-compiler-options" class="headerlink" title="Show default compiler options"></a>Show default compiler options</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -dM -E - &lt; /dev/null</span><br><span class="line">#define __SSP_STRONG__ 3</span><br><span class="line">#define __DBL_MIN_EXP__ (-1021)</span><br><span class="line">#define __FLT32X_MAX_EXP__ 1024</span><br><span class="line">#define __UINT_LEAST16_MAX__ 0xffff</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Show-default-header-inclusion-paths"><a href="#Show-default-header-inclusion-paths" class="headerlink" title="Show default header inclusion paths"></a>Show default header inclusion paths</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -E -Wp,-v - &lt; /dev/null</span><br><span class="line">ignoring nonexistent directory &quot;/usr/local/include&quot;</span><br><span class="line">ignoring nonexistent directory &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../x86_64-pc-linux-gnu/include&quot;</span><br><span class="line">#include &quot;...&quot; search starts here:</span><br><span class="line">#include &lt;...&gt; search starts here:</span><br><span class="line"> /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include</span><br><span class="line"> /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include-fixed</span><br><span class="line"> /usr/include</span><br><span class="line">End of search list.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="work-with-pkg-config-to-use-other-libraries"><a href="#work-with-pkg-config-to-use-other-libraries" class="headerlink" title="work with pkg-config to use other libraries"></a>work with pkg-config to use other libraries</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ `pkg-config --cflags --libs opencv` foo.cpp</span><br></pre></td></tr></table></figure><p>The above pkg-config command is expanded by shell.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pkg-config --cflags --libs opencv</span><br><span class="line">-I/usr/include/opencv -lopencv_shape -lopencv_stitching -lopencv_superres -lopencv_videostab -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_modern -lopencv_dnn_objdetect -lopencv_dpm -lopencv_face -lopencv_photo -lopencv_freetype -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_optflow -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_video -lopencv_plot -lopencv_ml -lopencv_ximgproc -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_flann -lopencv_xobjdetect -lopencv_imgcodecs -lopencv_objdetect -lopencv_xphoto -lopencv_imgproc -lopencv_core</span><br></pre></td></tr></table></figure><h3 id="static-stack-usage-analysis"><a href="#static-stack-usage-analysis" class="headerlink" title="static stack usage analysis"></a>static stack usage analysis</h3><p>Pass -fstack-usage to gcc.</p><p>Related:</p><ul><li>-fcallgraph-info</li><li>-fdump-tree-optimized</li><li>scripts/checkstack.pl in Linux kernel source.</li></ul><h3 id="gcc-function-trace"><a href="#gcc-function-trace" class="headerlink" title="gcc function trace"></a>gcc function trace</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -finstrument-functions foo.c</span><br></pre></td></tr></table></figure><p>The above command inserts <code>__cyg_profile_func_enter()</code> and <code>__cyg_profile_func_exit()</code> before and after a function call.<br>To disable it for certain functions, try:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __attribute__((__no_instrument_function__)) __cyg_profile_func_enter(<span class="keyword">void</span> *this_func, <span class="keyword">void</span> *caller)</span><br></pre></td></tr></table></figure><h3 id="dump-machine"><a href="#dump-machine" class="headerlink" title="dump machine"></a>dump machine</h3><p>Useful when you are working on cross-compiling.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -dumpmachine</span><br><span class="line">x86_64-pc-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="weak-strong-reference"><a href="#weak-strong-reference" class="headerlink" title="weak/strong reference"></a>weak/strong reference</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((weak))</span><br><span class="line">__attribute__((weakref)) void foo();</span><br></pre></td></tr></table></figure><p>If foo() is not defined, its address is 0.</p><h3 id="Turn-a-into-so"><a href="#Turn-a-into-so" class="headerlink" title="Turn .a into .so"></a>Turn .a into .so</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -o output.so libfoo.a</span><br></pre></td></tr></table></figure><h3 id="Check-unsafe-code"><a href="#Check-unsafe-code" class="headerlink" title="Check unsafe code"></a>Check unsafe code</h3><h4 id="Sanitizer"><a href="#Sanitizer" class="headerlink" title="Sanitizer"></a>Sanitizer</h4><p>There are three major kinds of sanitizers: address, thread and undefined. This field is under heavy development and more sanitizers might come. I personally use it with -g options to show full stack trace.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gcc -fsanitize=address</span><br><span class="line">gcc -fsanitize=thread</span><br><span class="line">gcc -fsanitize=undefined</span><br><span class="line"></span><br><span class="line"># Other variants</span><br><span class="line">gcc -fsanitize=kernel-address</span><br><span class="line">gcc -fsanitize=leak</span><br></pre></td></tr></table></figure><h4 id="stack-protector"><a href="#stack-protector" class="headerlink" title="stack protector"></a>stack protector</h4><p>Replace unsafe calls like gets()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fstack-protector -D_FORTIFY_SOURCE</span><br></pre></td></tr></table></figure><h4 id="32-bit-addition-overflow"><a href="#32-bit-addition-overflow" class="headerlink" title="32-bit addition overflow"></a>32-bit addition overflow</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -ftrapv</span><br></pre></td></tr></table></figure><h4 id="Mudflap-Pointer-Debugging-gcc-lt-4-9"><a href="#Mudflap-Pointer-Debugging-gcc-lt-4-9" class="headerlink" title="Mudflap Pointer Debugging (gcc &lt; 4.9)"></a>Mudflap Pointer Debugging (gcc &lt; 4.9)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fmudflap -lmudflap</span><br></pre></td></tr></table></figure><p>Use MUDFLAP_OPTIONS to do run time checking.</p><h3 id="list-header-inclusion"><a href="#list-header-inclusion" class="headerlink" title="list header inclusion"></a>list header inclusion</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ cat foo.c</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ gcc -H foo.c</span><br><span class="line">. /usr/include/stdio.h</span><br><span class="line">.. /usr/include/bits/libc-header-start.h</span><br><span class="line">... /usr/include/features.h</span><br><span class="line">.... /usr/include/sys/cdefs.h</span><br><span class="line">..... /usr/include/bits/wordsize.h</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Show-compile-time"><a href="#Show-compile-time" class="headerlink" title="Show compile time"></a>Show compile time</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -ftime-report foo.c</span><br><span class="line"></span><br><span class="line">Time variable                                   usr           sys          wall               GGC</span><br><span class="line"> phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.00 (  0%)    1243 kB ( 71%)</span><br><span class="line"> phase parsing                      :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)     436 kB ( 25%)</span><br><span class="line"> preprocessing                      :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)     127 kB (  7%)</span><br><span class="line"> TOTAL                              :   0.00          0.00          0.01           1744 kB</span><br></pre></td></tr></table></figure><h3 id="Show-optimization-items"><a href="#Show-optimization-items" class="headerlink" title="Show optimization items"></a>Show optimization items</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -O2 -Q --help=optimizers</span><br><span class="line">The following options control optimizations:</span><br><span class="line">  -O&lt;number&gt;                  </span><br><span class="line">  -Ofast                      </span><br><span class="line">  -Og                         </span><br><span class="line">  -Os                         </span><br><span class="line">  -faggressive-loop-optimizations [enabled]</span><br><span class="line">  -falign-functions           [disabled]</span><br><span class="line">  -falign-functions=          16</span><br><span class="line">  -falign-jumps               [disabled]</span><br><span class="line">  -falign-jumps=              16</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>For LLVM/clang:</p><p>see another post: clang-tips-and-tricks.</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Here are the tips and tricks that I collected along the way during my years as a software
        
      
    
    </summary>
    
    
      <category term="tooling" scheme="https://chihungtzeng.github.io/categories/tooling/"/>
    
    
      <category term="clang" scheme="https://chihungtzeng.github.io/tags/clang/"/>
    
      <category term="gcc" scheme="https://chihungtzeng.github.io/tags/gcc/"/>
    
      <category term="g++" scheme="https://chihungtzeng.github.io/tags/g/"/>
    
  </entry>
  
  <entry>
    <title>My .screenrc</title>
    <link href="https://chihungtzeng.github.io/2019/11/02/My-screenrc/"/>
    <id>https://chihungtzeng.github.io/2019/11/02/My-screenrc/</id>
    <published>2019-11-02T01:17:41.000Z</published>
    <updated>2019-11-03T02:34:01.913Z</updated>
    
    <content type="html"><![CDATA[<p>Save the following as ~/.screenrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># ctrl+a q unblock scrolling</span><br><span class="line">altscreen on # erase screen when quit apps</span><br><span class="line">defutf8 on</span><br><span class="line">defc1 off # treat input chars 128 ~ 159 as control functions</span><br><span class="line">defflow on</span><br><span class="line">activity &quot;activity in %n (%t)&quot;</span><br><span class="line">bell_msg &quot;bell in %n (%t)&quot;</span><br><span class="line">vbell on</span><br><span class="line">startup_message off</span><br><span class="line">nethack on</span><br><span class="line">shell $SHELL</span><br><span class="line">defscrollback 10000</span><br><span class="line"></span><br><span class="line"># using Ctrl+Left &amp; Ctrl+Right</span><br><span class="line">bindkey ^[[1;5D prev</span><br><span class="line">bindkey ^[[1;5C next</span><br><span class="line">bindkey \033[D prev</span><br><span class="line">bindkey \033[C next</span><br><span class="line"></span><br><span class="line"># encoding</span><br><span class="line">defencoding utf8</span><br><span class="line">bind b encoding big5 utf8</span><br><span class="line">bind u encoding utf8 utf8</span><br><span class="line">defbce on # erase background with current bg color</span><br><span class="line">cjkwidth off</span><br><span class="line">caption always &quot;%n(%t)&quot;</span><br><span class="line"></span><br><span class="line">screen -t coding 0</span><br><span class="line">screen -t coding 1</span><br><span class="line">screen -t coding 2</span><br><span class="line">screen -t build_code 3</span><br><span class="line">screen -t execution 4</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Save the following as ~/.screenrc&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
    
      <category term="tooling" scheme="https://chihungtzeng.github.io/categories/tooling/"/>
    
    
      <category term="linux" scheme="https://chihungtzeng.github.io/tags/linux/"/>
    
      <category term="screen" scheme="https://chihungtzeng.github.io/tags/screen/"/>
    
  </entry>
  
</feed>
