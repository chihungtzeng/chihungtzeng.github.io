<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clark&#39;s Mill</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chihungtzeng.github.io/"/>
  <updated>2019-12-05T15:26:45.714Z</updated>
  <id>https://chihungtzeng.github.io/</id>
  
  <author>
    <name>Clark</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Make gentoo-based docker image</title>
    <link href="https://chihungtzeng.github.io/2019/12/05/Make-gentoo-based-docker-image/"/>
    <id>https://chihungtzeng.github.io/2019/12/05/Make-gentoo-based-docker-image/</id>
    <published>2019-12-05T14:52:15.000Z</published>
    <updated>2019-12-05T15:26:45.714Z</updated>
    
    <content type="html"><![CDATA[<p>As a gentoo user, I want to build gentoo-based docker image to can deploy to other Linux distributions. Such a docker image is usually faster when compared to another one generated otherwise. This post documents my experience. In general, there are several steps as shown below.</p><ol><li>Prepare systemd-based stage3 image (mine is stage3-amd64-systemd-20190323.tar.bz2)</li><li>make a chrooted environment, as we do in standard gentoo installation.</li><li>Install the package into an initially empty directory.</li><li>Make docker image from that installation directory.</li></ol><p>Step 3 is the key. To do so, we need to use ROOT environment variable during emerge. Suppose that we want to make an image running nginx service. The command is as follows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROOT=/mnt/nginx-docker emerge bash shadow glibc nginx</span><br></pre></td></tr></table></figure><p>(Tips: we can futher chroot to /mnt/nginx-docker to check if we can launch the service.)</p><p>The reason why emerging bash/shadow/glibc is that we use dynamic shared libraries when building nginx. Although I didn’t try, I suspect that use <code>emerge -e nginx</code> would be OK in this case.</p><p>After emerge finishes, exit the chroot environment and run the following command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /mnt/gentoo/mnt/nginx-docker</span><br><span class="line">tar --numeric-owner -cj --to-stdout . |docker import - gentoo-nginx:base</span><br></pre></td></tr></table></figure><br>What follows is standard docker image making.</p><p>Although it is fun to do so, I would not recommend other people to make gentoo-based docker image because there are many dark corners out there.</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;As a gentoo user, I want to build gentoo-based docker image to can deploy to other Linux
        
      
    
    </summary>
    
    
      <category term="tooling" scheme="https://chihungtzeng.github.io/categories/tooling/"/>
    
    
  </entry>
  
  <entry>
    <title>Bookmarks about debugging</title>
    <link href="https://chihungtzeng.github.io/2019/11/25/Bookmarks-about-debugging/"/>
    <id>https://chihungtzeng.github.io/2019/11/25/Bookmarks-about-debugging/</id>
    <published>2019-11-25T02:17:39.000Z</published>
    <updated>2019-11-25T02:24:02.797Z</updated>
    
    <content type="html"><![CDATA[<p>This post is my collection of external posts about debugging. It is beneficial to see how other professionals approach bugs, and how to prevent them. The posts are in no particular order, by the way.</p><ul><li><a href="https://github.blog/2019-11-21-debugging-network-stalls-on-kubernetes/" target="_blank" rel="noopener">Debugging network stalls on Kubernetes</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;This post is my collection of external posts about debugging. It is beneficial to see how other
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Integrate gitlab and buildbot</title>
    <link href="https://chihungtzeng.github.io/2019/11/20/Integrate-gitlab-and-buildbot/"/>
    <id>https://chihungtzeng.github.io/2019/11/20/Integrate-gitlab-and-buildbot/</id>
    <published>2019-11-19T23:35:03.000Z</published>
    <updated>2019-11-25T02:25:24.781Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Situation"><a href="#Situation" class="headerlink" title="Situation"></a>Situation</h3><p>This is my personal experience.  I joined a software team where teammates did not pay enough attention to keep our codebase healthy. In many times, I pulled the tip code and the build failed because of syntax error. Even worse, sometimes the program did not run as expected. When preparing for a demo, people took hours to figure out how to successfully compile the code and run the programs.</p><p>Many of the team members join the team right after gradation from college. No body in the school taught them how to cowork as a team using modern tools. However, with a constant failure in building/deploying our project, smart people can sense something wrong in the team, feel disapointed, and leave for more promising teams.</p><p>To remedy this, we first set up gitlab to host our repositories and discourage people to exchange code via USB disk. It didn’t work well; some people are relunctant to push their code to gitlab and insisted their old workflow. Later, I set up buildbot to monitor the codebase and its build status. It helped; some people reacted quickly once the buildbot sent them emails about build failures, but some just ignored the emails. Then I realized that a patch should be <em>automaticaly</em> inspected before landing to the master branch.  To make the codebase health, that is, compilable and runnable, it is not enough to rely on work ethics.  A systematic method must be developed to block problematic commits sneaking into the codebase.</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>Combine the power of gitlab and buildbot to</p><ul><li>force code review, and</li><li>force compilation check before pushing to the master branch.</li></ul><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><ul><li>In gitlab, set master branch to be protected, allow no one to push, and allow only maintainers to merge.</li><li>In gitlab, set hook for merge request events.</li><li>In buildbot, define build steps for each merge request.</li><li>In buildbot, configure it to receive gitlab events, run the build steps, and send the build result back to gitlab.</li><li>(Optional) In gitlab, set merge checks to “Pipelines must succeed”.</li></ul><p>buildbot provides a good example of the configuration, see <a href="https://github.com/buildbot/buildbot/blob/master/master/docs/examples/gitlab.cfg" target="_blank" rel="noopener">here</a>.</p><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>We adopt many open source tools to perform the checks.  After a few weeks of the implementation, the buildbot dashboard looks greener than before.  Most of the workflow is done automatically. It does not take additional efforts when compared to the old one.  More important, people accept the new workflow, probably because the merge request are judged by objective tools, not by subjective people.</p><p>Below are the screenshots of the result. </p><p><img src="bbot_process_pipeline.png" alt="bbot_process_pipeline.png"></p><p><img src="mr_merge_only_success.png" alt="mr_merge_only_success.png"></p><p>In each merge request pipeline, we run an incremental build if possible, forbids any file larger than 15MB, and pylint for python files. If a pipeline stage fails, gitlab will show a red button in the merge request page to warn that the patch needs a further inspection.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>When buildbot and gitlab do not integrate well, add <strong>debug=True</strong> in GitLabStatusPush() call in buildbot master.cfg. It will show what’s going on between the two systems.</li><li>In the merge request pipeline, I wrote a condition to decide if we are going to do a clean build or a dirty build. This way, we can make the pipeline run faster in most cases.</li><li>In each pipeline, log everything and reveal it to users so that people know how to respond if something goes wrong.</li><li>At the beginning of merge request pipeline, the tip code is automatically merged<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git merge remotes/origin/master --no-ff</span><br><span class="line">git merge-base --is-ancestor remotes/origin/master HEAD</span><br></pre></td></tr></table></figure></li><li>To list the files in the merge request, use<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --name-only `git merge-base origin/master HEAD`</span><br></pre></td></tr></table></figure></li><li>cmake blog has <a href="https://blog.kitware.com/static-checks-with-cmake-cdash-iwyu-clang-tidy-lwyu-cpplint-and-cppcheck/" target="_blank" rel="noopener">a great post</a> about how to do static check. Some of them can be integrated into merge request pipeline.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;Situation&quot;&gt;&lt;a href=&quot;#Situation&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="tooling" scheme="https://chihungtzeng.github.io/categories/tooling/"/>
    
    
      <category term="buildbot" scheme="https://chihungtzeng.github.io/tags/buildbot/"/>
    
      <category term="gitlab" scheme="https://chihungtzeng.github.io/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>binary hacks</title>
    <link href="https://chihungtzeng.github.io/2019/11/05/binary-hacks/"/>
    <id>https://chihungtzeng.github.io/2019/11/05/binary-hacks/</id>
    <published>2019-11-05T11:05:00.000Z</published>
    <updated>2019-11-13T12:25:27.064Z</updated>
    
    <content type="html"><![CDATA[<p>This is a memo of how I work with binary files in Linux system. For a more systematic study of this topic, I found the following two books quite useful. Their authors are Japenese, and I am not sure if there are Enghlish version.</p><p><img src="binary_hacks.jpg" alt="binary_hacks.jpg"></p><h3 id="Show-defined-symbols-in-a-shared-library"><a href="#Show-defined-symbols-in-a-shared-library" class="headerlink" title="Show defined symbols in a shared library"></a>Show defined symbols in a shared library</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nm -C -D --defined-only /usr/lib/libopencv_imgproc.so</span><br><span class="line">000000000048b738 B __bss_start</span><br><span class="line">0000000000163880 T cv2DRotationMatrix</span><br><span class="line">0000000000048360 T cvAcc</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Show-debug-info-section-contents"><a href="#Show-debug-info-section-contents" class="headerlink" title="Show .debug_info section contents"></a>Show .debug_info section contents</h3><p>See symbol values</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ readelf --debug-dump=info foo.o</span><br><span class="line">Contents of the .debug_info section:</span><br><span class="line"></span><br><span class="line">  Compilation Unit @ offset 0x0:</span><br><span class="line">   Length:        0xcb (32-bit)</span><br><span class="line">   Version:       4</span><br><span class="line">   Abbrev Offset: 0x0</span><br><span class="line">   Pointer Size:  8</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Show-source-code-paths"><a href="#Show-source-code-paths" class="headerlink" title="Show source code paths"></a>Show source code paths</h3><p>Sometimes we get a spurious shared library, and we want to find how it was compiled. We can use <code>strings</code> to do so.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ strings -f /usr/lib/libopencv_imgproc.so</span><br></pre></td></tr></table></figure><p>It actually prints all the strings in a binary file. We need to inspect the ouput to catch the path.</p><h3 id="Dump-the-contents-of-a-section"><a href="#Dump-the-contents-of-a-section" class="headerlink" title="Dump the contents of a section"></a>Dump the contents of a section</h3><p>For example, we want to dump the .text section of libopencv_imgproc.so</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -h /usr/lib64/libopencv_imgproc.so | grep .text</span><br><span class="line"> 10 .text         001e0a84  000000000003aa80  000000000003aa80  0003aa80  2**4</span><br><span class="line">$ dd if=/usr/lib64/libopencv_imgproc.so of=output.bin bs=1 count=$[0x001e0a84] skip=$[0x0003aa80]</span><br></pre></td></tr></table></figure><p>The output file is output.bin.</p><h3 id="Check-ABI-compatibility"><a href="#Check-ABI-compatibility" class="headerlink" title="Check ABI compatibility"></a>Check ABI compatibility</h3><p>abi-comliance-checker</p><h3 id="Check-module-dependency"><a href="#Check-module-dependency" class="headerlink" title="Check module dependency"></a>Check module dependency</h3><p>elf-dependency-walker</p><h3 id="Recompile-related-c-when-h-is-modified"><a href="#Recompile-related-c-when-h-is-modified" class="headerlink" title="Recompile related *.c when .h is modified"></a>Recompile related *.c when .h is modified</h3><p>autodependencies with GNU make</p><h3 id="Check-what-compiler-that-generates-a-binary-file"><a href="#Check-what-compiler-that-generates-a-binary-file" class="headerlink" title="Check what compiler that generates a binary file"></a>Check what compiler that generates a binary file</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -p .comment foo.so</span><br><span class="line"></span><br><span class="line">String dump of section &apos;.comment&apos;:</span><br><span class="line">  [     0]  GCC: (Gentoo 8.2.0-r6 p1.7) 8.2.0</span><br><span class="line">  [    22]  GCC: (Gentoo 8.3.0-r1 p1.1) 8.3.0</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -s --section .comment foo.o</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;This is a memo of how I work with binary files in Linux system. For a more systematic study of
        
      
    
    </summary>
    
    
      <category term="tooling" scheme="https://chihungtzeng.github.io/categories/tooling/"/>
    
    
  </entry>
  
  <entry>
    <title>clang tips and tricks</title>
    <link href="https://chihungtzeng.github.io/2019/11/04/clang-tips-and-tricks/"/>
    <id>https://chihungtzeng.github.io/2019/11/04/clang-tips-and-tricks/</id>
    <published>2019-11-04T10:53:47.000Z</published>
    <updated>2019-11-04T12:13:20.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sanitizers"><a href="#sanitizers" class="headerlink" title="sanitizers"></a>sanitizers</h3><p>clang and gcc have similar sanitizer flags. It is widely documented so I do not write it here :D</p><h3 id="static-analyzer"><a href="#static-analyzer" class="headerlink" title="static analyzer"></a>static analyzer</h3><p>Clang has built-in static analyzer. Other similar tools are <code>flawfinder</code>, <code>cppcheck</code>, <code>egypt</code>, <code>pscan</code>, and <code>splint</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ cat foo.c </span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int *a = (int *) malloc(sizeof(int));</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ clang --analyze foo.c</span><br><span class="line">foo.c:5:8: warning: Value stored to &apos;a&apos; during its initialization is never read</span><br><span class="line">  int *a = (int *) malloc(sizeof(int));</span><br><span class="line">       ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">foo.c:6:3: warning: Potential leak of memory pointed to by &apos;a&apos;</span><br><span class="line">  return 0;</span><br><span class="line">  ^~~~~~~~</span><br><span class="line">2 warnings generated.</span><br></pre></td></tr></table></figure><h3 id="Show-what-targets-are-supported"><a href="#Show-what-targets-are-supported" class="headerlink" title="Show what targets are supported"></a>Show what targets are supported</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ llc --version</span><br><span class="line">LLVM (http://llvm.org/):</span><br><span class="line">  LLVM version 8.0.1</span><br><span class="line">  Optimized build.</span><br><span class="line">  Default target: x86_64-pc-linux-gnu</span><br><span class="line">  Host CPU: skylake</span><br><span class="line"></span><br><span class="line">  Registered Targets:</span><br><span class="line">    amdgcn  - AMD GCN GPUs</span><br><span class="line">    bpf     - BPF (host endian)</span><br><span class="line">    bpfeb   - BPF (big endian)</span><br><span class="line">    bpfel   - BPF (little endian)</span><br><span class="line">    nvptx   - NVIDIA PTX 32-bit</span><br><span class="line">    nvptx64 - NVIDIA PTX 64-bit</span><br><span class="line">    r600    - AMD GPUs HD2XXX-HD6XXX</span><br><span class="line">    x86     - 32-bit X86: Pentium-Pro and above</span><br><span class="line">    x86-64  - 64-bit X86: EM64T and AMD64</span><br></pre></td></tr></table></figure><h3 id="Show-the-details-about-optimizer"><a href="#Show-the-details-about-optimizer" class="headerlink" title="Show the details about optimizer"></a>Show the details about optimizer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ llvm-as &lt; /dev/null | opt -O2 -disable-output -debug-pass=Arguments</span><br><span class="line">Pass Arguments:  -tti -targetlibinfo -tbaa -scoped-noalias -assumption-cache-tracker -verify -simplifycfg -domtree -sroa -early-cse -lower-expect</span><br><span class="line">Pass Arguments:  -targetlibinfo -tti -tbaa -scoped-noalias -assumption-cache-tracker -forceattrs -inferattrs -ipsccp -globalopt -domtree -mem2reg -deadargelim -basicaa -aa -domtree -instcombine -simplifycfg -basiccg -globals-aa -prune-eh -inline -functionattrs -domtree -sroa -early-cse -lazy-value-info -jump-threading -correlated-propagation -simplifycfg -basicaa -aa -domtree -instcombine -tailcallelim -simplifycfg -reassociate -domtree -loops -loop-simplify -lcssa -loop-rotate -basicaa -aa -licm -loop-unswitch -simplifycfg -basicaa -aa -domtree -instcombine -loops -scalar-evolution -loop-simplify -lcssa -indvars -aa -loop-idiom -loop-deletion -loop-unroll -basicaa -aa -mldst-motion -aa -memdep -gvn -basicaa -aa -memdep -memcpyopt -sccp -domtree -demanded-bits -bdce -basicaa -aa -instcombine -lazy-value-info -jump-threading -correlated-propagation -domtree -basicaa -aa -memdep -dse -loops -loop-simplify -lcssa -aa -licm -adce -simplifycfg -basicaa -aa -domtree -instcombine -barrier -basiccg -rpo-functionattrs -elim-avail-extern -basiccg -globals-aa -float2int -domtree -loops -loop-simplify -lcssa -loop-rotate -branch-prob -block-freq -scalar-evolution -basicaa -aa -loop-accesses -demanded-bits -loop-vectorize -instcombine -scalar-evolution -aa -slp-vectorizer -simplifycfg -basicaa -aa -domtree -instcombine -loops -loop-simplify -lcssa -scalar-evolution -loop-unroll -basicaa -aa -instcombine -loop-simplify -lcssa -aa -licm -scalar-evolution -alignment-from-assumptions -strip-dead-prototypes -globaldce -constmerge -verify</span><br><span class="line">Pass Arguments:  -domtree</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;sanitizers&quot;&gt;&lt;a href=&quot;#sanitizers&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="tooling" scheme="https://chihungtzeng.github.io/categories/tooling/"/>
    
    
      <category term="clang" scheme="https://chihungtzeng.github.io/tags/clang/"/>
    
  </entry>
  
</feed>
